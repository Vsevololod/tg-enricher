// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getVideoByID = `-- name: GetVideoByID :one
SELECT hash_id, original_id, url, video_id, load_timestamp, path, title, duration, timestamp, filesize, thumbnail, channel_url, channel_id, user_id, channel, loaded_times FROM video WHERE hash_id = $1
`

func (q *Queries) GetVideoByID(ctx context.Context, hashID string) (Video, error) {
	row := q.db.QueryRow(ctx, getVideoByID, hashID)
	var i Video
	err := row.Scan(
		&i.HashID,
		&i.OriginalID,
		&i.Url,
		&i.VideoID,
		&i.LoadTimestamp,
		&i.Path,
		&i.Title,
		&i.Duration,
		&i.Timestamp,
		&i.Filesize,
		&i.Thumbnail,
		&i.ChannelUrl,
		&i.ChannelID,
		&i.UserID,
		&i.Channel,
		&i.LoadedTimes,
	)
	return i, err
}

const updateVideo = `-- name: UpdateVideo :exec
UPDATE video
SET path        = $1,
    title       = $2,
    duration    = $3,
    timestamp   = $4,
    filesize    = $5,
    thumbnail   = $6,
    channel_url = $7,
    channel_id  = $8,
    channel     = $9,
    video_id    = $10
WHERE hash_id = $11
`

type UpdateVideoParams struct {
	Path       string      `db:"path" json:"path"`
	Title      string      `db:"title" json:"title"`
	Duration   int64       `db:"duration" json:"duration"`
	Timestamp  int64       `db:"timestamp" json:"timestamp"`
	Filesize   pgtype.Int8 `db:"filesize" json:"filesize"`
	Thumbnail  string      `db:"thumbnail" json:"thumbnail"`
	ChannelUrl string      `db:"channel_url" json:"channel_url"`
	ChannelID  string      `db:"channel_id" json:"channel_id"`
	Channel    pgtype.Text `db:"channel" json:"channel"`
	VideoID    string      `db:"video_id" json:"video_id"`
	HashID     string      `db:"hash_id" json:"hash_id"`
}

func (q *Queries) UpdateVideo(ctx context.Context, arg UpdateVideoParams) error {
	_, err := q.db.Exec(ctx, updateVideo,
		arg.Path,
		arg.Title,
		arg.Duration,
		arg.Timestamp,
		arg.Filesize,
		arg.Thumbnail,
		arg.ChannelUrl,
		arg.ChannelID,
		arg.Channel,
		arg.VideoID,
		arg.HashID,
	)
	return err
}
